{
  "Enum Definitions": {
    "UIViewAutoresizing": {
      "_enum": {
        "UIViewAutoresizingFlexibleLeftMargin": "ofxGenericViewAutoresizingLeftMargin",
        "UIViewAutoresizingFlexibleWidth": "ofxGenericViewAutoresizingFlexibleWidth",
        "UIViewAutoresizingFlexibleRightMargin": "ofxGenericViewAutoresizingRightMargin",
        "UIViewAutoresizingFlexibleTopMargin": "ofxGenericViewAutoresizingTopMargin",
        "UIViewAutoresizingFlexibleHeight": "ofxGenericViewAutoresizingFlexibleHeight",
        "UIViewAutoresizingFlexibleBottomMargin": "ofxGenericViewAutoresizingBottomMargin"
      },
      "_inlineConstructor": "$autoresizingMask$"
    },
    "UILineBreakMode": {
      "_enum": {
        "UILineBreakModeCharacterWrap": "ofxGenericTextLinebreakModeCharacterWrap",
        "UILineBreakModeClip": "ofxGenericTextLinebreakModeClip",
        "UILineBreakModeHeadTruncation": "ofxGenericTextLinebreakModeHeadTruncation",
        "UILineBreakModeMiddleTruncation": "ofxGenericTextLinebreakModeMiddleTruncation",
        "UILineBreakModeTailTruncation": "ofxGenericTextLinebreakModeTailTruncation",
        "UILineBreakModeWordWrap": "ofxGenericTextLinebreakModeWordWrap"
      },
      "_inlineConstructor": "$lineBreakMode$"
    },
    "NSLineBreakMode": {
      "_enum": {
        "NSLineBreakByCharWrapping": "ofxGenericTextLinebreakModeCharacterWrap",
        "NSLineBreakByClipping": "ofxGenericTextLinebreakModeClip",
        "NSLineBreakByTruncatingHead": "ofxGenericTextLinebreakModeHeadTruncation",
        "NSLineBreakByTruncatingMiddle": "ofxGenericTextLinebreakModeMiddleTruncation",
        "NSLineBreakByTruncatingTail": "ofxGenericTextLinebreakModeTailTruncation",
        "NSLineBreakByWordWrapping": "ofxGenericTextLinebreakModeWordWrap"
      },
      "_inlineConstructor": "$lineBreakMode$"
    },
    "UITextAlignment": {
      "_enum": {
        "UITextAlignmentCenter": "ofxGenericTextHorizontalAlignmentCenter",
        "UITextAlignmentLeft": "ofxGenericTextHorizontalAlignmentLeft",
        "UITextAlignmentRight": "ofxGenericTextHorizontalAlignmentRight"
      },
      "_inlineConstructor": "$textAlignment$"
    },
    "NSTextAlignment": {
      "_enum": {
        "NSTextAlignmentCenter": "ofxGenericTextHorizontalAlignmentCenter",
        "NSTextAlignmentLeft": "ofxGenericTextHorizontalAlignmentLeft",
        "NSTextAlignmentRight": "ofxGenericTextHorizontalAlignmentRight"
      },
      "_inlineConstructor": "$textAlignment$"
    },
    "UIViewContentMode": {
      "_enum": {
        "UIViewContentModeScaleToFill": "ofxGenericContentModeScaleToFill",
        "UIViewContentModeScaleAspectFit": "ofxGenericContentModeScaleAspectFit",
        "UIViewContentModeScaleAspectFill": "ofxGenericContentModeScaleAspectFill",
        "UIViewContentModeRedraw": "ofxGenericContentModeRedraw",
        "UIViewContentModeCenter": "ofxGenericContentModeCenter",
        "UIViewContentModeTop": "ofxGenericContentModeTop",
        "UIViewContentModeBottom": "ofxGenericContentModeBottom",
        "UIViewContentModeLeft": "ofxGenericContentModeLeft",
        "UIViewContentModeRight": "ofxGenericContentModeRight",
        "UIViewContentModeTopLeft": "ofxGenericContentModeTopLeft",
        "UIViewContentModeTopRight": "ofxGenericContentModeTopRight",
        "UIViewContentModeBottomLeft": "ofxGenericContentModeBottomLeft",
        "UIViewContentModeBottomRight": "ofxGenericContentModeBottomRight"
      },
      "_inlineConstructor": "$contentMode$"
    },
    "UIButtonType": {
      "_enum": {
        "UIButtonTypeCustom": "ofxGenericButtonTypeCustom",
        "UIButtonTypeRoundedRect": "ofxGenericButtonTypeRoundedRect",
        "UIButtonTypeDetailDisclosure": "ofxGenericButtonTypeDetailDisclosure",
        "UIButtonTypeInfoLight": "ofxGenericButtonTypeInfoLight",
        "UIButtonTypeInfoDark": "ofxGenericButtonTypeInfoDark",
        "UIButtonTypeContactAdd": "ofxGenericButtonTypeContactAdd"
      },
      "_inlineConstructor": "$buttonType$"
    },
    "UIActivityIndicatorViewStyle": {
      "_enum": {
        "UIActivityIndicatorViewStyleWhiteLarge": "ofxGenericActivityViewStyleWhiteLarge",
        "UIActivityIndicatorViewStyleWhite": "ofxGenericActivityViewStyleWhite",
        "UIActivityIndicatorViewStyleGray": "ofxGenericActivityViewStyleGray"
      },
      "_inlineConstructor": "$indicatorStyle$"
    },
    "UITextAutocapitalizationType": {
      "_inlineConstructor": "$autocapitalizationType$",
      "_enum": {
        "UITextAutocapitalizationTypeNone": "ofxGenericTextAutoCapitalizationNone",
        "UITextAutocapitalizationTypeWords": "ofxGenericTextAutoCapitalizationWords",
        "UITextAutocapitalizationTypeSentences": "ofxGenericTextAutoCapitalizationSentences",
        "UITextAutocapitalizationTypeAllCharacters": "ofxGenericTextAutoCapitalizationAllCharacters"
      }
    },
    "UITextBorderStyle": {
      "_inlineConstructor": "$textBorderStyle$",
      "_enum": {
        "UITextBorderStyleNone": "ofxGenericTextViewBorderNone",
        "UITextBorderStyleLine": "ofxGenericTextViewBorderLine",
        "UITextBorderStyleBezel": "ofxGenericTextViewBorderBezel",
        "UITextBorderStyleRoundedRect": "ofxGenericTextViewBorderRoundedRect"
      }
    },
    "UIKeyboardType": {
      "_inlineConstructor": "$keyboardType$",
      "_enum": {
        "UIKeyboardTypeDefault": "ofxGenericKeyboardTypeDefault",
        "UIKeyboardTypeASCIICapable": "ofxGenericKeyboardTypeASCIICapable",
        "UIKeyboardTypeNumbersAndPunctuation": "ofxGenericKeyboardTypeNumbersAndPunctuation",
        "UIKeyboardTypeURL": "ofxGenericKeyboardTypeURL",
        "UIKeyboardTypeNumberPad": "ofxGenericKeyboardTypeNumberPad",
        "UIKeyboardTypePhonePad": "ofxGenericKeyboardTypePhonePad",
        "UIKeyboardTypeNamePhonePad": "ofxGenericKeyboardTypeNamePhonePad",
        "UIKeyboardTypeEmailAddress": "ofxGenericKeyboardTypeEmailAddress",
        "UIKeyboardTypeDecimalPad": "ofxGenericKeyboardTypeDecimalPad",
        "UIKeyboardTypeTwitter": "ofxGenericKeyboardTypeTwitter"
      }
    },
    "UIReturnKeyType": {
      "_inlineConstructor": "$returnKeyType$",
      "_enum": {
        "UIReturnKeyDefault": "ofxGenericKeyboardReturnKeyDefault",
        "UIReturnKeyGo": "ofxGenericKeyboardReturnKeyGo",
        "UIReturnKeyNext": "ofxGenericKeyboardReturnKeyNext",
        "UIReturnKeySearch": "ofxGenericKeyboardReturnKeySearch",
        "UIReturnKeySend": "ofxGenericKeyboardReturnKeySend",
        "UIReturnKeyDone": "ofxGenericKeyboardReturnKeyDone"
      }
    }
  },
  "Class Definitions": {
    "CGRect": {
      "_inlineConstructor": "ofRectangle( $x$, $y$, $width$, $height$ )"
    },
    "CGSize": {
      "_inlineConstructor": "ofPoint( $width$, $height$ )"
    },
    "UIActivityIndicatorView": {
      "_constructor": "ofPtr< ofxGenericActivityView > $instanceName$ = ofxGenericActivityView::create()",
      "_inlineConstructor": "ofxGenericActivityView::create()",
      "_include": [
        "#include \"ofxGenericActivityView.h\"",
        "#include \"ofxGenericUtility.h\"",
        "#include \"ofxGenericLocalization.h\""
      ],
      "_parameter": "ofPtr< ofxGenericActivityView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericActivityView >",
      "hidesWhenStopped": "$instanceName$->setHidesWhenStoppedAnimating( $hidesWhenStopped$ )",
      "color": "$instanceName$->setColor( $color$ )",
      "activityIndicatorViewStyle": "$instanceName$->setIndicatorViewStyle( $activityIndicatorViewStyle$ )"
    },
    "UIButton": {
      "localizedTitleKey": "$instanceName$->setText( ofxGLocalized( $localizedTitleKey$, $localizedTitleDefault$ ) )",
      "_constructor": "ofPtr< ofxGenericButtonView > $instanceName$ = ofxGenericButtonView::create( $buttonType$ )",
      "_include": [
        "#include \"ofxGenericButtonView.h\"",
        "#include \"ofxGenericUtility.h\"",
        "#include \"ofxGenericLocalization.h\""
      ],
      "_inlineConstructor": "ofxGenericButtonView::create( $buttonType$ )",
      "_parameter": "ofPtr< ofxGenericButtonView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericButtonView >",
      "backgroundImage": "$instanceName$->setBackgroundImage( $backgroundImage$ )",
      "backgroundDownImage": "$instanceName$->setDownBackgroundImage( $backgroundDownImage$ )",
      "downTitleColor": "$instanceName$->setDownTextColor( $downTitleColor$ )",
      "enabled": "$instanceName$->setEnabled( $enabled$ )",
      "localizedTitleKey": "$instanceName$->setText( ofxGLocalized( $localizedTitleKey$, $localizedTitleDefaultKey$ ) )",
      "title": "$instanceName$->setText( $title$ )",
      "titleLabel.textAlignment": "$instanceName$->setTextAlignment( $titleLabel.textAlignment$ )",
      "titleLabel.textColor": "$instanceName$->setTextColor( $titleLabel.textColor$ )",
      "titleLabel.lineBreakMode": "$instanceName$->setLineBreakMode( $titleLabel.lineBreakMode$ )",
      "titleLabel.numberOfLines": "$instanceName$->setNumberOfLines( $titleLabel.numberOfLines$ )",
      "titleLabel.minimumFontSize": "$instanceName$->setMinimumFontSize( $titleLabel.minimumFontSize$ )",
      "titleLabel.fontName": "$instanceName$->setFont( $titleLabel.fontName$, $instanceName$->getFontSize() )",
      "titleLabel.fontSize": "$instanceName$->setFont( $instanceName$->getFontName(), $titleLabel.fontSize$ )",
      "rootView": "$instanceName$->setDelegate( dynamic_pointer_cast< ofxGenericButtonViewDelegate >( rootView ) )"
    },
    "UIButtonLabel": {
      "_super": "UILabel"
    },
    "UIColor": {
      "_inlineConstructor": "ofColor( (int)( $red$ * 255 ), (int)( $green$ * 255 ), (int)( $blue$ * 255 ), (int)( $alpha$ * 255 ) )"
    },
    "UIEdgeInsets": {
      "_inlineConstructor": ""
    },
    "UIImageView": {
      "_constructor": "ofPtr< ofxGenericImageView > $instanceName$ = ofxGenericImageView::create( )",
      "_include": [
        "#include \"ofxGenericImageView.h\"",
        "#include \"ofxGenericUtility.h\""
      ],
      "_inlineConstructor": "ofxGenericImageView::create(  )",
      "_parameter": "ofPtr< ofxGenericImageView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericImageView >",
      "image": "$instanceName$->setImage( $image$ )"
    },
    "UILabel": {
      "_constructor": "ofPtr< ofxGenericTextView > $instanceName$ = ofxGenericTextView::create( )",
      "_include": [
        "#include \"ofxGenericTextView.h\"",
        "#include \"ofxGenericUtility.h\"",
        "#include \"ofxGenericLocalization.h\""
      ],
      "_inlineConstructor": "ofxGenericTextView::create( )",
      "_parameter": "ofPtr< ofxGenericTextView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericTextView >",
      "fontName": "$instanceName$->setFont( $fontName$, $instanceName$->getFontSize() )",
      "fontSize": "$instanceName$->setFont( $instanceName$->getFontName(), $fontSize$ )",
      "minimumFontSize": "$instanceName$->setMinimumFontSize( $minimumFontSize$ )",
      "lineBreakMode": "$instanceName$->setLineBreakMode( $lineBreakMode$ )",
      "numberOfLines": "$instanceName$->setNumberOfLines( $numberOfLines$ )",
      "localizedTextKey": "$instanceName$->setText( ofxGLocalized( $localizedTextKey$, $localizedDefaultTextKey$ ) )",
      "text": "$instanceName$->setText( $text$ )",
      "textAlignment": "$instanceName$->setTextAlignment( $textAlignment$ )",
      "textColor": "$instanceName$->setTextColor( $textColor$ )",
      "adjustsFontSizeToFitWidth": "$instanceName$->setAutosizeFontToFitText( $adjustsFontSizeToFitWidth$ )"
    },
    "UIRoundedRectButton": {
      "_super": "UIButton"
    },
    "UIScrollView": {
      "_constructor": "ofPtr< ofxGenericScrollView > $instanceName$ = ofxGenericScrollView::create( )",
      "_include": [
        "#include \"ofxGenericScrollView.h\"",
        "#include \"ofxGenericUtility.h\""
      ],
      "_inlineConstructor": "ofxGenericScrollView::create( )",
      "_parameter": "ofPtr< ofxGenericScrollView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericScrollView >",
      "autoContentSizeToFit": "$instanceName$->setAutoContentSizeToFit( $autoContentSizeToFit$ )"
    },
    "UITableView": {
      "_constructor": "ofPtr< ofxGenericTableView > $instanceName$ = ofxGenericTableView::create( )",
      "_include": [
        "#include \"ofxGenericTableView.h\"",
        "#include \"ofxGenericUtility.h\""
      ],
      "_inlineConstructor": "ofxGenericTableView::create( )",
      "_parameter": "ofPtr< ofxGenericTableView > &$instanceName$",
      "_super": "UIScrollView",
      "_declaration": "ofPtr< ofxGenericTableView >",
      "rootView": "$instanceName$->setDelegate( dynamic_pointer_cast< ofxGenericTableViewDelegate >( rootView ) )",
      "contentInsetBottom": "$instanceName$->setUsePaddedSeparator( $contentInsetBottom$ )"
    },
    "UITextField": {
      "_constructor": "ofPtr< ofxGenericEditTextView > $instanceName$ = ofxGenericEditTextView::create( ofRectangle(), ofPtrWeak< ofxGenericEditTextViewDelegate >(), false )",
      "_include": [
        "#include \"ofxGenericEditTextView.h\"",
        "#include \"ofxGenericUtility.h\"",
        "#include \"ofxGenericLocalization.h\""
      ],
      "_inlineConstructor": "ofxGenericEditTextView::create( ofRectangle(), ofPtrWeak< ofxGenericEditTextViewDelegate >(), false )",
      "_parameter": "ofPtr< ofxGenericEditTextView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericEditTextView >",
      "autocapitalizationType": "$instanceName$->setAutoCapitalization( $autocapitalizationType$ )",
      "autocorrection": "$instanceName$->setAutoCorrection( $autocorrection$ )",
      "textBorderStyle": "$instanceName$->setBorderStyle( $textBorderStyle$ )",
      "clearsOnBeginEditing": "$instanceName$->setClearsOnBeginEditing( $clearsOnBeginEditing$ )",
      "enablesReturnKeyAutomatically": "$instanceName$->setEnableReturnKeyAutomatically( $enablesReturnKeyAutomatically$ )",
      "keyboardType": "$instanceName$->setKeyboard( $keyboardType$ )",
      "placeholderText": "$instanceName$->setPlaceholderText( $placeholderText$ )",
      "returnKeyType": "$instanceName$->setKeyboardReturnKey( $returnKeyType$ )",
      "secureText": "$instanceName$->setSecureText( $secureText$ )",
      "text": "$instanceName$->setText( $text$ )",
      "fontName": "$instanceName$->setFont( $fontName$, $instanceName$->getFontSize() )",
      "fontSize": "$instanceName$->setFont( $instanceName$->getFontName(), $fontSize$ )",
      "textAlignment": "$instanceName$->setTextAlignment( $textAlignment$ )",
      "rootView": "$instanceName$->setDelegate( dynamic_pointer_cast< ofxGenericEditTextViewDelegate >( rootView ) )"
    },
    "UITextView": {
      "_constructor": "ofPtr< ofxGenericEditTextView > $instanceName$ = ofxGenericEditTextView::create( ofRectangle(), ofPtrWeak< ofxGenericEditTextViewDelegate >(), true )",
      "_include": [
        "#include \"ofxGenericEditTextView.h\"",
        "#include \"ofxGenericUtility.h\"",
        "#include \"ofxGenericLocalization.h\""
      ],
      "_inlineConstructor": "ofxGenericEditTextView::create( ofRectangle(), ofPtrWeak< ofxGenericEditTextViewDelegate >(), true )",
      "_parameter": "ofPtr< ofxGenericEditTextView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericEditTextView >",
      "autocapitalizationType": "$instanceName$->setAutoCapitalization( $autocapitalizationType$ )",
      "autocorrection": "$instanceName$->setAutoCorrection( $autocorrection$ )",
      "enablesReturnKeyAutomatically": "$instanceName$->setEnableReturnKeyAutomatically( $enablesReturnKeyAutomatically$ )",
      "keyboardType": "$instanceName$->setKeyboard( $keyboardType$ )",
      "returnKeyType": "$instanceName$->setKeyboardReturnKey( $returnKeyType$ )",
      "secureText": "$instanceName$->setSecureText( $secureText$ )",
      "text": "$instanceName$->setText( $text$ )",
      "fontName": "$instanceName$->setFont( $fontName$, $instanceName$->getFontSize() )",
      "fontSize": "$instanceName$->setFont( $instanceName$->getFontName(), $fontSize$ )",
      "textAlignment": "$instanceName$->setTextAlignment( $textAlignment$ )",
      "rootView": "$instanceName$->setDelegate( dynamic_pointer_cast< ofxGenericEditTextViewDelegate >( rootView ) )"
    },
    "UIView": {
      "_addSubview": "$instanceName$->addChildView( % )",
      "_constructor": "ofPtr< ofxGenericView > $instanceName$ = ofxGenericView::create( )",
      "_include": [
        "#include \"ofxGenericView.h\"",
        "#include \"ofxGenericUtility.h\""
      ],
      "_inlineConstructor": "ofxGenericView::create( )",
      "_parameter": "ofPtr< ofxGenericView > &$instanceName$",
      "_declaration": "ofPtr< ofxGenericView >",
      "alpha": "$instanceName$->setAlpha( $alpha$ )",
      "autoresizingMask": "$instanceName$->setAutoresizingMask( $autoresizingMask$ )",
      "backgroundColor": "$instanceName$->setBackgroundColor( $backgroundColor$ )",
      "frame": "$instanceName$->setFrame( $frame$ )",
      "visible": "$instanceName$->setVisible( $visible$ )",
      "clipsToBounds": "$instanceName$->setClipSubviews( $clipsToBounds$ )",
      "contentMode": "$instanceName$->setContentMode( $contentMode$ )"
    },
    "UIPageControl": {
      "_constructor": "ofPtr< ofxGenericPageControl > $instanceName$ = ofxGenericPageControl::create()",
      "_inlineConstructor": "ofxGenericPageControl::create()",
      "_include": [
        "#include \"ofxGenericPageControl.h\"",
        "#include \"ofxGenericUtility.h\""
      ],
      "_parameter": "ofPtr< ofxGenericPageControl > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericPageControl >",
      "currentPage": "$instanceName$->setCurrentPage( $currentPage$ )",
      "numberOfPages": "$instanceName$->setPageCount( $numberOfPages$ )",
      "hidesForSinglePage": "$instanceName$->setHidesForSinglePage( $hidesForSinglePage$ )"
    },
    "UISwitch": {
      "_constructor": "ofPtr< ofxGenericSwitchView > $instanceName$ = ofxGenericSwitchView::create()",
      "_inlineConstructor": "ofxGenericSwitchView::create()",
      "_include": [
        "#include \"ofxGenericSwitchView.h\""
      ],
      "_parameter": "ofPtr< ofxGenericSwitchView > &$instanceName$",
      "_super": "UIView",
      "_declaration": "ofPtr< ofxGenericSwitchView >",
      "on": "$instanceName$->setSwitched( $on$, false )",
      "onTintColor": "$instanceName$->setTintColor( $onTintColor$ )",
      "rootView": "$instanceName$->setDelegate( dynamic_pointer_cast< ofxGenericSwitchViewDelegate >( rootView ) )"
    }
  },
  "__COMMENTS__": {
    "All Other Keys": {
      "Every other key is what code will be added for a particular value. We can add keys as desired to match values exported from the xibs.": ""
    },
    "Reserved Replacement Characters": {
      "$xxxx$": "The string in between two $ signs is the key of the exported value that will be inserted there. To see keys, have a look at the exported .json version of the hierarchy.",
      "%": "This character is replaced with secondary instance names, that is the name of what's being added or referenced. In function definitions, this will NOT include a leading comma.",
      "$instanceName$": "Occurrences of this character are replaced with instance names - either a generated one or the name of an outlet.",
      "b": "When a b character appears before a $xx$, this is a value that will be output as a boolean with the string 'true' or 'false'",
      "ƒ": "Used in function definitions, this represents the guts of the function (all the view data etc). Option-F to type",
      "∞": "Used in function definitions, this represents the list of outlets without types included and inserts a comma. Option-% to type",
      "§": "Used in function definitions, this represents the list of outlets without types included and does not insert a comma. Option-^ to type",
      "ﬁ": "Used in function definitions, this represents the list of outlets with types included and inserts a comma. Option-Shift-% to type.",
      "∂": "Can use to get stuff in the dictionary hierarchy, like ∂frame.x∂ gives the X of the frame of the root view. Option-D to type."
    },
    "Special Nested Keys": {
      "_addSubview": "When adding a child view, this will be called.",
      "_constructor": "When a new, non-outleted instance of an object is created, this will be called.",
      "_enum": "If something in the class has the $xx$ syntax, then the _enum dictionary will be looked through for the final thing to output. It uses the value of the $xx$ variable to determine what to use as the key in the lookup in _enum.",
      "_include": "If this class needs to be included in the ExportedViews.h file, put the include statement here.",
      "_inlineConstructor": "When another function call requires an instance of this object to be created as a parameter (almost exclusively structs like rects and colors), this will be called. It is also called for outlets, except the outlet also prepends an = .",
      "_parameter": "If this is an outlet, this value will be placed into the main function as a parameter.",
      "_super": "Specifies the super class for this object. If there is one, then all code definition values from the super class will be used also. Any like values naturally have the child classes taking precedence."
    },
    "Special Root Keys": {
      "_functionDefinitions": "An array of function definitions. All will be placed into the exported results, potentially with identical contents. Use $instanceName$ to represent the function name, % to represent the outlets, and ƒ to represent the function contents.",
      "_rootViewInstanceName": "The string name for the root view, will automatically be set to its instance name if it doesn't have one defined. You can use this to make more elaborate constructors.",
      "_ignoredClasses": "If any of these classes exists they will be ignored, not exported."
    }
  },
  "_functionDefinitionFileName": "ofxGenericDefinition.h",
  "_ignoredClasses": {
    "_UITableViewSeparatorView": true
  },
  "_asIsStringKeys": {
    "autoresizingMask": true
  },
  "_statementEnd": ";"
}